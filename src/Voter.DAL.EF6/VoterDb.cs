

// ------------------------------------------------------------------------------------------------
// This code was generated by EntityFramework Reverse POCO Generator (http://www.reversepoco.com/).
// Created by Simon Hughes (https://about.me/simon.hughes).
//
// Do not make changes directly to this file - edit the template instead.
//
// The following connection settings were used to generate this file:
//     Configuration file:     "Voter.DAL.EF6\App.config"
//     Connection String Name: "VoterDb"
//     Connection String:      "Data Source=ALU\SQL2019_CTP;Initial Catalog=Voter.DB;Integrated Security=True"
// ------------------------------------------------------------------------------------------------
// Database Edition        : Developer Edition (64-bit)
// Database Engine Edition : Enterprise
// Database Version        : 15.0.1000.34

// <auto-generated>
// ReSharper disable ConvertPropertyToExpressionBody
// ReSharper disable DoNotCallOverridableMethodsInConstructor
// ReSharper disable EmptyNamespace
// ReSharper disable InconsistentNaming
// ReSharper disable PartialMethodWithSinglePart
// ReSharper disable PartialTypeWithSinglePart
// ReSharper disable RedundantNameQualifier
// ReSharper disable RedundantOverridenMember
// ReSharper disable UseNameofExpression
// TargetFrameworkVersion = 4.6
#pragma warning disable 1591    //  Ignore "Missing XML Comment" warning


namespace Voter.DAL.EF6
{
    using System.Linq;

    #region Unit of work

    public interface IVoterDbContext : System.IDisposable
    {
        System.Data.Entity.DbSet<DataImport> DataImports { get; set; } // DataImports
        System.Data.Entity.DbSet<Election> Elections { get; set; } // Election
        System.Data.Entity.DbSet<EmployeeHistory> EmployeeHistories { get; set; } // EmployeeHistory
        System.Data.Entity.DbSet<Voter> Voters { get; set; } // Voter
        System.Data.Entity.DbSet<VoterElection> VoterElections { get; set; } // VoterElection
        System.Data.Entity.DbSet<VoterTemporal> VoterTemporals { get; set; } // Voter_Temporal

        int SaveChanges();
        System.Threading.Tasks.Task<int> SaveChangesAsync();
        System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken);
        System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get; }
        System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get; }
        System.Data.Entity.Database Database { get; }
        System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class;
        System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity);
        System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors();
        System.Data.Entity.DbSet Set(System.Type entityType);
        System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class;
        string ToString();

        // Stored Procedures
        ImportVoterCsvReturnModel ImportVoterCsv(string fileName);
        System.Threading.Tasks.Task<ImportVoterCsvReturnModel> ImportVoterCsvAsync(string fileName);

        int ParseRawToElections(System.DateTime? sourceDate);
        // ParseRawToElectionsAsync cannot be created due to having out parameters, or is relying on the procedure result (int)

        System.Collections.Generic.List<ProcessVoterDataImportReturnModel> ProcessVoterDataImport();
        System.Collections.Generic.List<ProcessVoterDataImportReturnModel> ProcessVoterDataImport(out int procResult);
        System.Threading.Tasks.Task<System.Collections.Generic.List<ProcessVoterDataImportReturnModel>> ProcessVoterDataImportAsync();

    }

    #endregion

    #region Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class VoterDbContext : System.Data.Entity.DbContext, IVoterDbContext
    {
        public System.Data.Entity.DbSet<DataImport> DataImports { get; set; } // DataImports
        public System.Data.Entity.DbSet<Election> Elections { get; set; } // Election
        public System.Data.Entity.DbSet<EmployeeHistory> EmployeeHistories { get; set; } // EmployeeHistory
        public System.Data.Entity.DbSet<Voter> Voters { get; set; } // Voter
        public System.Data.Entity.DbSet<VoterElection> VoterElections { get; set; } // VoterElection
        public System.Data.Entity.DbSet<VoterTemporal> VoterTemporals { get; set; } // Voter_Temporal

        static VoterDbContext()
        {
            System.Data.Entity.Database.SetInitializer<VoterDbContext>(null);
        }

        public VoterDbContext()
            : base("Name=VoterDb")
        {
        }

        public VoterDbContext(string connectionString)
            : base(connectionString)
        {
        }

        public VoterDbContext(string connectionString, System.Data.Entity.Infrastructure.DbCompiledModel model)
            : base(connectionString, model)
        {
        }

        public VoterDbContext(System.Data.Common.DbConnection existingConnection, bool contextOwnsConnection)
            : base(existingConnection, contextOwnsConnection)
        {
        }

        public VoterDbContext(System.Data.Common.DbConnection existingConnection, System.Data.Entity.Infrastructure.DbCompiledModel model, bool contextOwnsConnection)
            : base(existingConnection, model, contextOwnsConnection)
        {
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
        }

        public bool IsSqlParameterNull(System.Data.SqlClient.SqlParameter param)
        {
            var sqlValue = param.SqlValue;
            var nullableValue = sqlValue as System.Data.SqlTypes.INullable;
            if (nullableValue != null)
                return nullableValue.IsNull;
            return (sqlValue == null || sqlValue == System.DBNull.Value);
        }

        protected override void OnModelCreating(System.Data.Entity.DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.Configurations.Add(new DataImportConfiguration());
            modelBuilder.Configurations.Add(new ElectionConfiguration());
            modelBuilder.Configurations.Add(new EmployeeHistoryConfiguration());
            modelBuilder.Configurations.Add(new VoterConfiguration());
            modelBuilder.Configurations.Add(new VoterElectionConfiguration());
            modelBuilder.Configurations.Add(new VoterTemporalConfiguration());
        }

        public static System.Data.Entity.DbModelBuilder CreateModel(System.Data.Entity.DbModelBuilder modelBuilder, string schema)
        {
            modelBuilder.Configurations.Add(new DataImportConfiguration(schema));
            modelBuilder.Configurations.Add(new ElectionConfiguration(schema));
            modelBuilder.Configurations.Add(new EmployeeHistoryConfiguration(schema));
            modelBuilder.Configurations.Add(new VoterConfiguration(schema));
            modelBuilder.Configurations.Add(new VoterElectionConfiguration(schema));
            modelBuilder.Configurations.Add(new VoterTemporalConfiguration(schema));
            return modelBuilder;
        }

        // Stored Procedures
        public ImportVoterCsvReturnModel ImportVoterCsv(string fileName)
        {
            var fileNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FileName", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = fileName, Size = 250 };
            if (fileNameParam.Value == null)
                fileNameParam.Value = System.DBNull.Value;


            var procResultData = new ImportVoterCsvReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[ImportVoterCSV]";
            cmd.Parameters.Add(fileNameParam);

            try
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Open(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
                var reader = cmd.ExecuteReader();
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ImportVoterCsvReturnModel.ResultSetModel1>(reader).ToList();
                reader.NextResult();

                procResultData.ResultSet2 = objectContext.Translate<ImportVoterCsvReturnModel.ResultSetModel2>(reader).ToList();
                reader.Close();

            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public async System.Threading.Tasks.Task<ImportVoterCsvReturnModel> ImportVoterCsvAsync(string fileName)
        {
            var fileNameParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@FileName", SqlDbType = System.Data.SqlDbType.VarChar, Direction = System.Data.ParameterDirection.Input, Value = fileName, Size = 250 };
            if (fileNameParam.Value == null)
                fileNameParam.Value = System.DBNull.Value;


            var procResultData = new ImportVoterCsvReturnModel();
            var cmd = Database.Connection.CreateCommand();
            cmd.CommandType = System.Data.CommandType.StoredProcedure;
            cmd.CommandText = "[dbo].[ImportVoterCSV]";
            cmd.Parameters.Add(fileNameParam);

            try
            {
                await System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.OpenAsync(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext(), new System.Threading.CancellationToken()).ConfigureAwait(false);
                var reader = await cmd.ExecuteReaderAsync().ConfigureAwait(false);
                var objectContext = ((System.Data.Entity.Infrastructure.IObjectContextAdapter) this).ObjectContext;

                procResultData.ResultSet1 = objectContext.Translate<ImportVoterCsvReturnModel.ResultSetModel1>(reader).ToList();
                await reader.NextResultAsync().ConfigureAwait(false);

                procResultData.ResultSet2 = objectContext.Translate<ImportVoterCsvReturnModel.ResultSetModel2>(reader).ToList();
            }
            finally
            {
                System.Data.Entity.Infrastructure.Interception.DbInterception.Dispatch.Connection.Close(Database.Connection, new System.Data.Entity.Infrastructure.Interception.DbInterceptionContext());
            }
            return procResultData;
        }

        public int ParseRawToElections(System.DateTime? sourceDate)
        {
            var sourceDateParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@SourceDate", SqlDbType = System.Data.SqlDbType.DateTime2, Direction = System.Data.ParameterDirection.Input, Value = sourceDate.GetValueOrDefault() };
            if (!sourceDate.HasValue)
                sourceDateParam.Value = System.DBNull.Value;

            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };

            Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction, "EXEC @procResult = [dbo].[ParseRawToElections] @SourceDate", sourceDateParam, procResultParam);

            return (int) procResultParam.Value;
        }

        public System.Collections.Generic.List<ProcessVoterDataImportReturnModel> ProcessVoterDataImport()
        {
            int procResult;
            return ProcessVoterDataImport(out procResult);
        }

        public System.Collections.Generic.List<ProcessVoterDataImportReturnModel> ProcessVoterDataImport(out int procResult)
        {
            var procResultParam = new System.Data.SqlClient.SqlParameter { ParameterName = "@procResult", SqlDbType = System.Data.SqlDbType.Int, Direction = System.Data.ParameterDirection.Output };
            var procResultData = Database.SqlQuery<ProcessVoterDataImportReturnModel>("EXEC @procResult = [dbo].[ProcessVoterDataImport] ", procResultParam).ToList();

            procResult = (int) procResultParam.Value;
            return procResultData;
        }

        public async System.Threading.Tasks.Task<System.Collections.Generic.List<ProcessVoterDataImportReturnModel>> ProcessVoterDataImportAsync()
        {
            var procResultData = await Database.SqlQuery<ProcessVoterDataImportReturnModel>("EXEC [dbo].[ProcessVoterDataImport] ").ToListAsync();

            return procResultData;
        }

    }
    #endregion

    #region Database context factory

    public class VoterDbContextFactory : System.Data.Entity.Infrastructure.IDbContextFactory<VoterDbContext>
    {
        public VoterDbContext Create()
        {
            return new VoterDbContext();
        }
    }

    #endregion

    #region Fake Database context

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeVoterDbContext : IVoterDbContext
    {
        public System.Data.Entity.DbSet<DataImport> DataImports { get; set; }
        public System.Data.Entity.DbSet<Election> Elections { get; set; }
        public System.Data.Entity.DbSet<EmployeeHistory> EmployeeHistories { get; set; }
        public System.Data.Entity.DbSet<Voter> Voters { get; set; }
        public System.Data.Entity.DbSet<VoterElection> VoterElections { get; set; }
        public System.Data.Entity.DbSet<VoterTemporal> VoterTemporals { get; set; }

        public FakeVoterDbContext()
        {
            _changeTracker = null;
            _configuration = null;
            _database = null;

            DataImports = new FakeDbSet<DataImport>("Id");
            Elections = new FakeDbSet<Election>("ElectionId");
            EmployeeHistories = new FakeDbSet<EmployeeHistory>("VoterId", "ValidFrom", "ValidTo");
            Voters = new FakeDbSet<Voter>("VoterId");
            VoterElections = new FakeDbSet<VoterElection>("VoterId");
            VoterTemporals = new FakeDbSet<VoterTemporal>("VoterId", "ValidFrom", "ValidTo");
        }

        public int SaveChangesCount { get; private set; }
        public int SaveChanges()
        {
            ++SaveChangesCount;
            return 1;
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync()
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1);
        }

        public System.Threading.Tasks.Task<int> SaveChangesAsync(System.Threading.CancellationToken cancellationToken)
        {
            ++SaveChangesCount;
            return System.Threading.Tasks.Task<int>.Factory.StartNew(() => 1, cancellationToken);
        }

        protected virtual void Dispose(bool disposing)
        {
        }

        public void Dispose()
        {
            Dispose(true);
        }

        private System.Data.Entity.Infrastructure.DbChangeTracker _changeTracker;
        public System.Data.Entity.Infrastructure.DbChangeTracker ChangeTracker { get { return _changeTracker; } }
        private System.Data.Entity.Infrastructure.DbContextConfiguration _configuration;
        public System.Data.Entity.Infrastructure.DbContextConfiguration Configuration { get { return _configuration; } }
        private System.Data.Entity.Database _database;
        public System.Data.Entity.Database Database { get { return _database; } }
        public System.Data.Entity.Infrastructure.DbEntityEntry<TEntity> Entry<TEntity>(TEntity entity) where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.Infrastructure.DbEntityEntry Entry(object entity)
        {
            throw new System.NotImplementedException();
        }
        public System.Collections.Generic.IEnumerable<System.Data.Entity.Validation.DbEntityValidationResult> GetValidationErrors()
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet Set(System.Type entityType)
        {
            throw new System.NotImplementedException();
        }
        public System.Data.Entity.DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            throw new System.NotImplementedException();
        }
        public override string ToString()
        {
            throw new System.NotImplementedException();
        }


        // Stored Procedures
        public ImportVoterCsvReturnModel ImportVoterCsv(string fileName)
        {
            int procResult;
            return ImportVoterCsv(fileName, out procResult);
        }

        public ImportVoterCsvReturnModel ImportVoterCsv(string fileName, out int procResult)
        {

            procResult = 0;
            return new ImportVoterCsvReturnModel();
        }

        public System.Threading.Tasks.Task<ImportVoterCsvReturnModel> ImportVoterCsvAsync(string fileName)
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ImportVoterCsv(fileName, out procResult));
        }

        public int ParseRawToElections(System.DateTime? sourceDate)
        {

            return 0;
        }

        public System.Collections.Generic.List<ProcessVoterDataImportReturnModel> ProcessVoterDataImport()
        {
            int procResult;
            return ProcessVoterDataImport(out procResult);
        }

        public System.Collections.Generic.List<ProcessVoterDataImportReturnModel> ProcessVoterDataImport(out int procResult)
        {

            procResult = 0;
            return new System.Collections.Generic.List<ProcessVoterDataImportReturnModel>();
        }

        public System.Threading.Tasks.Task<System.Collections.Generic.List<ProcessVoterDataImportReturnModel>> ProcessVoterDataImportAsync()
        {
            int procResult;
            return System.Threading.Tasks.Task.FromResult(ProcessVoterDataImport(out procResult));
        }

    }

    // ************************************************************************
    // Fake DbSet
    // Implementing Find:
    //      The Find method is difficult to implement in a generic fashion. If
    //      you need to test code that makes use of the Find method it is
    //      easiest to create a test DbSet for each of the entity types that
    //      need to support find. You can then write logic to find that
    //      particular type of entity, as shown below:
    //      public class FakeBlogDbSet : FakeDbSet<Blog>
    //      {
    //          public override Blog Find(params object[] keyValues)
    //          {
    //              var id = (int) keyValues.Single();
    //              return this.SingleOrDefault(b => b.BlogId == id);
    //          }
    //      }
    //      Read more about it here: https://msdn.microsoft.com/en-us/data/dn314431.aspx
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbSet<TEntity> : System.Data.Entity.DbSet<TEntity>, IQueryable, System.Collections.Generic.IEnumerable<TEntity>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity> where TEntity : class
    {
        private readonly System.Reflection.PropertyInfo[] _primaryKeys;
        private readonly System.Collections.ObjectModel.ObservableCollection<TEntity> _data;
        private readonly IQueryable _query;

        public FakeDbSet()
        {
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public FakeDbSet(params string[] primaryKeys)
        {
            _primaryKeys = typeof(TEntity).GetProperties().Where(x => primaryKeys.Contains(x.Name)).ToArray();
            _data = new System.Collections.ObjectModel.ObservableCollection<TEntity>();
            _query = _data.AsQueryable();
        }

        public override TEntity Find(params object[] keyValues)
        {
            if (_primaryKeys == null)
                throw new System.ArgumentException("No primary keys defined");
            if (keyValues.Length != _primaryKeys.Length)
                throw new System.ArgumentException("Incorrect number of keys passed to Find method");

            var keyQuery = this.AsQueryable();
            keyQuery = keyValues
                .Select((t, i) => i)
                .Aggregate(keyQuery,
                    (current, x) =>
                        current.Where(entity => _primaryKeys[x].GetValue(entity, null).Equals(keyValues[x])));

            return keyQuery.SingleOrDefault();
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(System.Threading.CancellationToken cancellationToken, params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues), cancellationToken);
        }

        public override System.Threading.Tasks.Task<TEntity> FindAsync(params object[] keyValues)
        {
            return System.Threading.Tasks.Task<TEntity>.Factory.StartNew(() => Find(keyValues));
        }

        public override System.Collections.Generic.IEnumerable<TEntity> AddRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Add(entity);
            }
            return items;
        }

        public override TEntity Add(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override System.Collections.Generic.IEnumerable<TEntity> RemoveRange(System.Collections.Generic.IEnumerable<TEntity> entities)
        {
            if (entities == null) throw new System.ArgumentNullException("entities");
            var items = entities.ToList();
            foreach (var entity in items)
            {
                _data.Remove(entity);
            }
            return items;
        }

        public override TEntity Remove(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Remove(item);
            return item;
        }

        public override TEntity Attach(TEntity item)
        {
            if (item == null) throw new System.ArgumentNullException("item");
            _data.Add(item);
            return item;
        }

        public override TEntity Create()
        {
            return System.Activator.CreateInstance<TEntity>();
        }

        public override TDerivedEntity Create<TDerivedEntity>()
        {
            return System.Activator.CreateInstance<TDerivedEntity>();
        }

        public override System.Collections.ObjectModel.ObservableCollection<TEntity> Local
        {
            get { return _data; }
        }

        System.Type IQueryable.ElementType
        {
            get { return _query.ElementType; }
        }

        System.Linq.Expressions.Expression IQueryable.Expression
        {
            get { return _query.Expression; }
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<TEntity>(_query.Provider); }
        }

        System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Collections.Generic.IEnumerator<TEntity> System.Collections.Generic.IEnumerable<TEntity>.GetEnumerator()
        {
            return _data.GetEnumerator();
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator<TEntity> System.Data.Entity.Infrastructure.IDbAsyncEnumerable<TEntity>.GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<TEntity>(_data.GetEnumerator());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncQueryProvider<TEntity> : System.Data.Entity.Infrastructure.IDbAsyncQueryProvider
    {
        private readonly IQueryProvider _inner;

        public FakeDbAsyncQueryProvider(IQueryProvider inner)
        {
            _inner = inner;
        }

        public IQueryable CreateQuery(System.Linq.Expressions.Expression expression)
        {
            var m = expression as System.Linq.Expressions.MethodCallExpression;
            if (m != null)
            {
                var resultType = m.Method.ReturnType; // it shoud be IQueryable<T>
                var tElement = resultType.GetGenericArguments()[0];
                var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(tElement);
                return (IQueryable) System.Activator.CreateInstance(queryType, expression);
            }
            return new FakeDbAsyncEnumerable<TEntity>(expression);
        }

        public IQueryable<TElement> CreateQuery<TElement>(System.Linq.Expressions.Expression expression)
        {
            var queryType = typeof(FakeDbAsyncEnumerable<>).MakeGenericType(typeof(TElement));
            return (IQueryable<TElement>)System.Activator.CreateInstance(queryType, expression);
        }

        public object Execute(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute(expression);
        }

        public TResult Execute<TResult>(System.Linq.Expressions.Expression expression)
        {
            return _inner.Execute<TResult>(expression);
        }

        public System.Threading.Tasks.Task<object> ExecuteAsync(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute(expression));
        }

        public System.Threading.Tasks.Task<TResult> ExecuteAsync<TResult>(System.Linq.Expressions.Expression expression, System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(Execute<TResult>(expression));
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncEnumerable<T> : EnumerableQuery<T>, System.Data.Entity.Infrastructure.IDbAsyncEnumerable<T>, IQueryable<T>
    {
        public FakeDbAsyncEnumerable(System.Collections.Generic.IEnumerable<T> enumerable)
            : base(enumerable)
        { }

        public FakeDbAsyncEnumerable(System.Linq.Expressions.Expression expression)
            : base(expression)
        { }

        public System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T> GetAsyncEnumerator()
        {
            return new FakeDbAsyncEnumerator<T>(this.AsEnumerable().GetEnumerator());
        }

        System.Data.Entity.Infrastructure.IDbAsyncEnumerator System.Data.Entity.Infrastructure.IDbAsyncEnumerable.GetAsyncEnumerator()
        {
            return GetAsyncEnumerator();
        }

        IQueryProvider IQueryable.Provider
        {
            get { return new FakeDbAsyncQueryProvider<T>(this); }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class FakeDbAsyncEnumerator<T> : System.Data.Entity.Infrastructure.IDbAsyncEnumerator<T>
    {
        private readonly System.Collections.Generic.IEnumerator<T> _inner;

        public FakeDbAsyncEnumerator(System.Collections.Generic.IEnumerator<T> inner)
        {
            _inner = inner;
        }

        public void Dispose()
        {
            _inner.Dispose();
        }

        public System.Threading.Tasks.Task<bool> MoveNextAsync(System.Threading.CancellationToken cancellationToken)
        {
            return System.Threading.Tasks.Task.FromResult(_inner.MoveNext());
        }

        public T Current
        {
            get { return _inner.Current; }
        }

        object System.Data.Entity.Infrastructure.IDbAsyncEnumerator.Current
        {
            get { return Current; }
        }
    }

    #endregion

    #region POCO classes

    // DataImports
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DataImport
    {
        public int Id { get; set; } // Id (Primary key)
        public string FileName { get; set; } // FileName (length: 200)
        public System.DateTime FileDate { get; set; } // FileDate
        public System.DateTime ImportDate { get; set; } // ImportDate
    }

    // Election
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Election
    {
        public int ElectionId { get; set; } // ElectionId (Primary key)
        public int VoteYear { get; set; } // VoteYear
        public string VoteElection { get; set; } // VoteElection (length: 10)
        public string Note { get; set; } // Note
        public System.DateTime Ceated { get; set; } // Ceated

        // Reverse navigation

        /// <summary>
        /// Child VoterElections where [VoterElection].[ElectionId] point to this entity (FK_VoterElection_Election)
        /// </summary>
        public virtual System.Collections.Generic.ICollection<VoterElection> VoterElections { get; set; } // VoterElection.FK_VoterElection_Election

        public Election()
        {
            VoterElections = new System.Collections.Generic.List<VoterElection>();
        }
    }

    // EmployeeHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EmployeeHistory
    {
        public int VoterId { get; set; } // VoterId (Primary key)
        public string Un { get; set; } // UN
        public string Party { get; set; } // PARTY
        public string D47P { get; set; } // D/P
        public string LastName { get; set; } // LastName
        public string FirstName { get; set; } // FirstName
        public string MiddleName { get; set; } // MiddleName
        public string Suffix { get; set; } // Suffix
        public string RegDate { get; set; } // RegDate
        public string OrgRegDate { get; set; } // OrgRegDate
        public string DistDate { get; set; } // DistDate
        public string Address { get; set; } // Address
        public string City { get; set; } // City
        public string Zip { get; set; } // Zip
        public string MailingAddr1 { get; set; } // MailingAddr1
        public string MailingADdr2 { get; set; } // MailingADdr2
        public string MailingAddr3 { get; set; } // MailingAddr3
        public string MailingCity { get; set; } // MailingCity
        public string MailingState { get; set; } // MailingState
        public string MailingZip { get; set; } // MailingZip
        public string MailingCountry { get; set; } // MailingCountry
        public string Gender { get; set; } // Gender
        public System.DateTime ValidFrom { get; set; } // ValidFrom (Primary key)
        public System.DateTime ValidTo { get; set; } // ValidTo (Primary key)
    }

    // The table 'RawStateVoterImport' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // RawStateVoterImport
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RawStateVoterImport
    {
        public string Un { get; set; } // UN (length: 1)
        public string Party { get; set; } // PARTY (length: 1)
        public string D47P { get; set; } // D/P (length: 6)
        public string LastName { get; set; } // LAST NAME (length: 50)
        public string FirstName { get; set; } // FIRST NAME (length: 50)
        public string MiddleName { get; set; } // MIDDLE NAME (length: 50)
        public string SuffixName { get; set; } // SUFFIX NAME (length: 10)
        public int? Ascension35 { get; set; } // ASCENSION #
        public System.DateTime? RegDate { get; set; } // REG DATE
        public System.DateTime? OrgRegDate { get; set; } // ORG REG DATE
        public System.DateTime? DistDate { get; set; } // DIST DATE
        public string ResidenceAddress { get; set; } // RESIDENCE ADDRESS (length: 100)
        public string ResidenceCity { get; set; } // RESIDENCE CITY (length: 100)
        public string ResidenceZip { get; set; } // RESIDENCE ZIP (length: 100)
        public string MailingAddress1 { get; set; } // MAILING ADDRESS1 (length: 100)
        public string MailingAddress2 { get; set; } // MAILING ADDRESS2 (length: 100)
        public string MailingAddress3 { get; set; } // MAILING ADDRESS3 (length: 100)
        public string MailingCity { get; set; } // MAILING CITY (length: 100)
        public string MailingState { get; set; } // MAILING STATE (length: 100)
        public string MailingZip { get; set; } // MAILING ZIP (length: 10)
        public string MailingCountry { get; set; } // MAILING COUNTRY (length: 200)
        public string Gender { get; set; } // GENDER
        public string Vh1 { get; set; } // VH1 (length: 10)
        public string Vh2 { get; set; } // VH2 (length: 10)
        public string Vh3 { get; set; } // VH3 (length: 10)
        public string Vh4 { get; set; } // VH4 (length: 10)
        public string Vh5 { get; set; } // VH5 (length: 10)
        public string Vh6 { get; set; } // VH6 (length: 10)
        public string Vh7 { get; set; } // VH7 (length: 10)
        public string Vh8 { get; set; } // VH8 (length: 10)
        public string Vh9 { get; set; } // VH9 (length: 10)
        public string Vh10 { get; set; } // VH10 (length: 10)
        public string Vh11 { get; set; } // VH11 (length: 10)
        public string Vh12 { get; set; } // VH12 (length: 10)
        public string Vh13 { get; set; } // VH13 (length: 10)
        public string Vh14 { get; set; } // VH14 (length: 10)
        public string Vh15 { get; set; } // VH15 (length: 10)
        public string Vh16 { get; set; } // VH16 (length: 10)
    }

    // The table 'RawVotes' is not usable by entity framework because it
    // does not have a primary key. It is listed here for completeness.
    // RawVotes
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class RawVote
    {
        public int? VoterId { get; set; } // VoterId
        public string Election { get; set; } // Election (length: 10)
        public int? VoteYear { get; set; } // VoteYear
        public string VoteElection { get; set; } // VoteElection (length: 4)
        public string VoteMethod { get; set; } // VoteMethod (length: 2)
    }

    // Voter
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class Voter
    {
        public int VoterId { get; set; } // VoterId (Primary key)
        public string Un { get; set; } // UN
        public string Party { get; set; } // PARTY
        public string D47P { get; set; } // D/P
        public string LastName { get; set; } // LastName
        public string FirstName { get; set; } // FirstName
        public string MiddleName { get; set; } // MiddleName
        public string Suffix { get; set; } // Suffix
        public string RegDate { get; set; } // RegDate
        public string OrgRegDate { get; set; } // OrgRegDate
        public string DistDate { get; set; } // DistDate
        public string Address { get; set; } // Address
        public string City { get; set; } // City
        public string Zip { get; set; } // Zip
        public string MailingAddr1 { get; set; } // MailingAddr1
        public string MailingADdr2 { get; set; } // MailingADdr2
        public string MailingAddr3 { get; set; } // MailingAddr3
        public string MailingCity { get; set; } // MailingCity
        public string MailingState { get; set; } // MailingState
        public string MailingZip { get; set; } // MailingZip
        public string MailingCountry { get; set; } // MailingCountry
        public string Gender { get; set; } // Gender
        public System.DateTime ValidFrom { get; set; } // ValidFrom
        public System.DateTime ValidTo { get; set; } // ValidTo

        // Reverse navigation

        /// <summary>
        /// Parent (One-to-One) Voter pointed by [VoterElection].[VoterId] (FK_VoterElection_Voter)
        /// </summary>
        public virtual VoterElection VoterElection { get; set; } // VoterElection.FK_VoterElection_Voter
    }

    // VoterElection
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class VoterElection
    {
        public int VoterId { get; set; } // VoterId (Primary key)
        public int ElectionId { get; set; } // ElectionId
        public string Vote { get; set; } // Vote (length: 10)

        // Foreign keys

        /// <summary>
        /// Parent Election pointed by [VoterElection].([ElectionId]) (FK_VoterElection_Election)
        /// </summary>
        public virtual Election Election { get; set; } // FK_VoterElection_Election

        /// <summary>
        /// Parent Voter pointed by [VoterElection].([VoterId]) (FK_VoterElection_Voter)
        /// </summary>
        public virtual Voter Voter { get; set; } // FK_VoterElection_Voter
    }

    // Voter_Temporal
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class VoterTemporal
    {
        public int VoterId { get; set; } // VoterId (Primary key)
        public string Un { get; set; } // UN
        public string Party { get; set; } // PARTY
        public string D47P { get; set; } // D/P
        public string LastName { get; set; } // LastName
        public string FirstName { get; set; } // FirstName
        public string MiddleName { get; set; } // MiddleName
        public string Suffix { get; set; } // Suffix
        public string RegDate { get; set; } // RegDate
        public string OrgRegDate { get; set; } // OrgRegDate
        public string DistDate { get; set; } // DistDate
        public string Address { get; set; } // Address
        public string City { get; set; } // City
        public string Zip { get; set; } // Zip
        public string MailingAddr1 { get; set; } // MailingAddr1
        public string MailingADdr2 { get; set; } // MailingADdr2
        public string MailingAddr3 { get; set; } // MailingAddr3
        public string MailingCity { get; set; } // MailingCity
        public string MailingState { get; set; } // MailingState
        public string MailingZip { get; set; } // MailingZip
        public string MailingCountry { get; set; } // MailingCountry
        public string Gender { get; set; } // Gender
        public System.DateTime ValidFrom { get; set; } // ValidFrom (Primary key)
        public System.DateTime ValidTo { get; set; } // ValidTo (Primary key)
    }

    #endregion

    #region POCO Configuration

    // DataImports
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class DataImportConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<DataImport>
    {
        public DataImportConfiguration()
            : this("dbo")
        {
        }

        public DataImportConfiguration(string schema)
        {
            ToTable("DataImports", schema);
            HasKey(x => x.Id);

            Property(x => x.Id).HasColumnName(@"Id").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.FileName).HasColumnName(@"FileName").HasColumnType("varchar").IsRequired().IsUnicode(false).HasMaxLength(200);
            Property(x => x.FileDate).HasColumnName(@"FileDate").HasColumnType("date").IsRequired();
            Property(x => x.ImportDate).HasColumnName(@"ImportDate").HasColumnType("datetime").IsRequired();
        }
    }

    // Election
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ElectionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Election>
    {
        public ElectionConfiguration()
            : this("dbo")
        {
        }

        public ElectionConfiguration(string schema)
        {
            ToTable("Election", schema);
            HasKey(x => x.ElectionId);

            Property(x => x.ElectionId).HasColumnName(@"ElectionId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.VoteYear).HasColumnName(@"VoteYear").HasColumnType("int").IsRequired();
            Property(x => x.VoteElection).HasColumnName(@"VoteElection").HasColumnType("nchar").IsRequired().IsFixedLength().HasMaxLength(10);
            Property(x => x.Note).HasColumnName(@"Note").HasColumnType("varchar(max)").IsOptional().IsUnicode(false);
            Property(x => x.Ceated).HasColumnName(@"Ceated").HasColumnType("datetime2").IsRequired();
        }
    }

    // EmployeeHistory
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class EmployeeHistoryConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<EmployeeHistory>
    {
        public EmployeeHistoryConfiguration()
            : this("dbo")
        {
        }

        public EmployeeHistoryConfiguration(string schema)
        {
            ToTable("EmployeeHistory", schema);
            HasKey(x => new { x.VoterId, x.ValidFrom, x.ValidTo });

            Property(x => x.VoterId).HasColumnName(@"VoterId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Un).HasColumnName(@"UN").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Party).HasColumnName(@"PARTY").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.D47P).HasColumnName(@"D/P").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Suffix).HasColumnName(@"Suffix").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.RegDate).HasColumnName(@"RegDate").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.OrgRegDate).HasColumnName(@"OrgRegDate").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.DistDate).HasColumnName(@"DistDate").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Zip).HasColumnName(@"Zip").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingAddr1).HasColumnName(@"MailingAddr1").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingADdr2).HasColumnName(@"MailingADdr2").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingAddr3).HasColumnName(@"MailingAddr3").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingCity).HasColumnName(@"MailingCity").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingState).HasColumnName(@"MailingState").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingZip).HasColumnName(@"MailingZip").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingCountry).HasColumnName(@"MailingCountry").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    // Voter
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class VoterConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<Voter>
    {
        public VoterConfiguration()
            : this("dbo")
        {
        }

        public VoterConfiguration(string schema)
        {
            ToTable("Voter", schema);
            HasKey(x => x.VoterId);

            Property(x => x.VoterId).HasColumnName(@"VoterId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Un).HasColumnName(@"UN").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Party).HasColumnName(@"PARTY").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.D47P).HasColumnName(@"D/P").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Suffix).HasColumnName(@"Suffix").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.RegDate).HasColumnName(@"RegDate").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.OrgRegDate).HasColumnName(@"OrgRegDate").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.DistDate).HasColumnName(@"DistDate").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Zip).HasColumnName(@"Zip").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingAddr1).HasColumnName(@"MailingAddr1").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingADdr2).HasColumnName(@"MailingADdr2").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingAddr3).HasColumnName(@"MailingAddr3").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingCity).HasColumnName(@"MailingCity").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingState).HasColumnName(@"MailingState").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingZip).HasColumnName(@"MailingZip").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingCountry).HasColumnName(@"MailingCountry").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
            Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.Identity);
        }
    }

    // VoterElection
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class VoterElectionConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VoterElection>
    {
        public VoterElectionConfiguration()
            : this("dbo")
        {
        }

        public VoterElectionConfiguration(string schema)
        {
            ToTable("VoterElection", schema);
            HasKey(x => x.VoterId);

            Property(x => x.VoterId).HasColumnName(@"VoterId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ElectionId).HasColumnName(@"ElectionId").HasColumnType("int").IsRequired();
            Property(x => x.Vote).HasColumnName(@"Vote").HasColumnType("char").IsRequired().IsFixedLength().IsUnicode(false).HasMaxLength(10);

            // Foreign keys
            HasRequired(a => a.Election).WithMany(b => b.VoterElections).HasForeignKey(c => c.ElectionId).WillCascadeOnDelete(false); // FK_VoterElection_Election
            HasRequired(a => a.Voter).WithOptional(b => b.VoterElection).WillCascadeOnDelete(false); // FK_VoterElection_Voter
        }
    }

    // Voter_Temporal
    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class VoterTemporalConfiguration : System.Data.Entity.ModelConfiguration.EntityTypeConfiguration<VoterTemporal>
    {
        public VoterTemporalConfiguration()
            : this("dbo")
        {
        }

        public VoterTemporalConfiguration(string schema)
        {
            ToTable("Voter_Temporal", schema);
            HasKey(x => new { x.VoterId, x.ValidFrom, x.ValidTo });

            Property(x => x.VoterId).HasColumnName(@"VoterId").HasColumnType("int").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.Un).HasColumnName(@"UN").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Party).HasColumnName(@"PARTY").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.D47P).HasColumnName(@"D/P").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.LastName).HasColumnName(@"LastName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.FirstName).HasColumnName(@"FirstName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MiddleName).HasColumnName(@"MiddleName").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Suffix).HasColumnName(@"Suffix").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.RegDate).HasColumnName(@"RegDate").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.OrgRegDate).HasColumnName(@"OrgRegDate").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.DistDate).HasColumnName(@"DistDate").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Address).HasColumnName(@"Address").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.City).HasColumnName(@"City").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Zip).HasColumnName(@"Zip").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingAddr1).HasColumnName(@"MailingAddr1").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingADdr2).HasColumnName(@"MailingADdr2").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingAddr3).HasColumnName(@"MailingAddr3").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingCity).HasColumnName(@"MailingCity").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingState).HasColumnName(@"MailingState").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingZip).HasColumnName(@"MailingZip").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.MailingCountry).HasColumnName(@"MailingCountry").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.Gender).HasColumnName(@"Gender").HasColumnType("nvarchar(max)").IsOptional();
            Property(x => x.ValidFrom).HasColumnName(@"ValidFrom").HasColumnType("datetime2").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
            Property(x => x.ValidTo).HasColumnName(@"ValidTo").HasColumnType("datetime2").IsRequired().HasDatabaseGeneratedOption(System.ComponentModel.DataAnnotations.Schema.DatabaseGeneratedOption.None);
        }
    }

    #endregion

    #region Stored procedure return models

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ImportVoterCsvReturnModel
    {
        public class ResultSetModel1
        {
            public System.String Column1 { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel1> ResultSet1;

        public class ResultSetModel2
        {
            public System.Int32? ErrorNumber { get; set; }
            public System.Int32? ErrorSeverity { get; set; }
            public System.Int32? ErrorState { get; set; }
            public System.String ErrorProcedure { get; set; }
            public System.Int32? ErrorLine { get; set; }
            public System.String ErrorMessage { get; set; }
        }
        public System.Collections.Generic.List<ResultSetModel2> ResultSet2;

    }

    [System.CodeDom.Compiler.GeneratedCode("EF.Reverse.POCO.Generator", "2.37.2.0")]
    public class ProcessVoterDataImportReturnModel
    {
        public System.String Column1 { get; set; }
    }

    #endregion

}
// </auto-generated>

